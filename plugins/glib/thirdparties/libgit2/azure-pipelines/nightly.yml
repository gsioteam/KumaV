resources:
- repo: self

jobs:
- job: linux_amd64_xenial_gcc_openssl
  displayName: 'Linux (amd64; Xenial; GCC; OpenSSL)'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - template: docker.yml
    parameters:
      docker:
        image: xenial
        base: ubuntu:xenial
      environmentVariables: |
       CC=gcc
       CMAKE_GENERATOR=Ninja
       CMAKE_OPTIONS=-DUSE_HTTPS=OpenSSL -DREGEX_BACKEND=builtin -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=valgrind
       RUN_INVASIVE_TESTS=true

- job: linux_amd64_xenial_gcc_mbedtls
  displayName: 'Linux (amd64; Xenial; GCC; mbedTLS)'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - template: docker.yml
    parameters:
      docker:
        image: xenial
        base: ubuntu:xenial
      environmentVariables: |
       CC=gcc
       CMAKE_GENERATOR=Ninja
       CMAKE_OPTIONS=-DUSE_HTTPS=mbedTLS -DUSE_SHA1=HTTPS -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=valgrind
       RUN_INVASIVE_TESTS=true

- job: linux_amd64_xenial_clang_openssl
  displayName: 'Linux (amd64; Xenial; Clang; OpenSSL)'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - template: docker.yml
    parameters:
      docker:
        image: xenial
        base: ubuntu:xenial
      environmentVariables: |
       CC=clang
       CMAKE_GENERATOR=Ninja
       CMAKE_OPTIONS=-DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=valgrind
       RUN_INVASIVE_TESTS=true

- job: linux_amd64_xenial_clang_mbedtls
  displayName: 'Linux (amd64; Xenial; Clang; mbedTLS)'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - template: docker.yml
    parameters:
      docker:
        image: xenial
        base: ubuntu:xenial
      environmentVariables: |
       CC=clang
       CMAKE_GENERATOR=Ninja
       CMAKE_OPTIONS=-DUSE_HTTPS=mbedTLS -DUSE_SHA1=HTTPS -DREGEX_BACKEND=pcre -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=valgrind
       RUN_INVASIVE_TESTS=true

- job: macos
  displayName: 'macOS (amd64; 10.15)'
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - bash: . '$(Build.SourcesDirectory)/azure-pipelines/setup-osx.sh'
    displayName: Setup
  - template: bash.yml
    parameters:
      environmentVariables:
        TMPDIR: $(Agent.TempDirectory)
        PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig
        CMAKE_GENERATOR: Ninja
        CMAKE_OPTIONS: -DREGEX_BACKEND=regcomp_l -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=leaks -DUSE_GSSAPI=ON
        RUN_INVASIVE_TESTS: true
        SKIP_SSH_TESTS: true

- job: windows_vs_amd64
  displayName: 'Windows (amd64; Visual Studio)'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: bash.yml
    parameters:
      environmentVariables:
        CMAKE_GENERATOR: Visual Studio 15 2017
        CMAKE_OPTIONS: -A x64 -DMSVC_CRTDBG=ON -DDEPRECATE_HARD=ON
        RUN_INVASIVE_TESTS: true
        SKIP_SSH_TESTS: true

- job: windows_vs_x86
  displayName: 'Windows (x86; Visual Studio)'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: bash.yml
    parameters:
      environmentVariables:
        CMAKE_GENERATOR: Visual Studio 15 2017
        CMAKE_OPTIONS: -A Win32 -DMSVC_CRTDBG=ON -DDEPRECATE_HARD=ON -DUSE_SHA1=HTTPS
        RUN_INVASIVE_TESTS: true
        SKIP_SSH_TESTS: true

- job: windows_mingw_amd64
  displayName: 'Windows (amd64; MinGW)'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - bash: . '$(Build.SourcesDirectory)\azure-pipelines\setup-mingw.sh'
    displayName: Setup
    env:
      TEMP: $(Agent.TempDirectory)
      ARCH: amd64
  - template: bash.yml
    parameters:
      environmentVariables:
        BUILD_PATH: $(Agent.TempDirectory)\mingw64\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files (x86)\CMake\bin
        CMAKE_GENERATOR: MinGW Makefiles
        CMAKE_OPTIONS: -DDEPRECATE_HARD=ON
        RUN_INVASIVE_TESTS: true
        SKIP_SSH_TESTS: true

- job: windows_mingw_x86
  displayName: 'Windows (x86; MinGW)'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - bash: . '$(Build.SourcesDirectory)\azure-pipelines\setup-mingw.sh'
    displayName: Setup
    workingDirectory: '$(Build.BinariesDirectory)'
    env:
      TEMP: $(Agent.TempDirectory)
      ARCH: x86
  - template: bash.yml
    parameters:
      environmentVariables:
        BUILD_PATH: $(Agent.TempDirectory)\mingw32\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files (x86)\CMake\bin
        CMAKE_GENERATOR: MinGW Makefiles
        CMAKE_OPTIONS: -DDEPRECATE_HARD=ON
        RUN_INVASIVE_TESTS: true
        SKIP_SSH_TESTS: true

- job: linux_x86_bionic_gcc_openssl
  displayName: 'Linux (x86; Bionic; GCC; OpenSSL)'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - template: docker.yml
    parameters:
      qemu: 'true'
      docker:
        image: bionic
        base: multiarch/ubuntu-core:x86-bionic
      environmentVariables: |
       CC=gcc
       CMAKE_GENERATOR=Ninja
       CMAKE_OPTIONS=-DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=valgrind
       RUN_INVASIVE_TESTS=true

- job: linux_x86_bionic_clang_openssl
  displayName: 'Linux (x86; Bionic; Clang; OpenSSL)'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - template: docker.yml
    parameters:
      qemu: 'true'
      docker:
        image: bionic
        base: multiarch/ubuntu-core:x86-bionic
      environmentVariables: |
       CC=clang
       CMAKE_GENERATOR=Ninja
       CMAKE_OPTIONS=-DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=valgrind
       RUN_INVASIVE_TESTS=true

- job: linux_arm32_bionic_gcc_openssl
  displayName: 'Linux (arm32; Bionic; GCC; OpenSSL)'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - template: docker.yml
    parameters:
      qemu: 'true'
      docker:
        image: bionic
        base: multiarch/ubuntu-core:armhf-bionic
      environmentVariables: |
       CC=gcc
       CMAKE_GENERATOR=Ninja
       CMAKE_OPTIONS=-DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON
       RUN_INVASIVE_TESTS=true
       SKIP_PROXY_TESTS=true

- job: linux_arm64_bionic_gcc_openssl
  displayName: 'Linux (arm64; Bionic; GCC; OpenSSL)'
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - template: docker.yml
    parameters:
      qemu: 'true'
      docker:
        image: bionic
        base: multiarch/ubuntu-core:arm64-bionic
      environmentVariables: |
       CC=gcc
       CMAKE_GENERATOR=Ninja
       CMAKE_OPTIONS=-DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON
       RUN_INVASIVE_TESTS=true
       SKIP_PROXY_TESTS=true
